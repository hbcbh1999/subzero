# workflow to build and test the project
name: ci

on:
  push:
    branches:
      - main
defaults:
  run:
    shell: bash

env:
  PG_VER: 15
  RUST_BACKTRACE: 1
  CARGO_NET_GIT_FETCH_WITH_CLI: "true"
  SCCACHE_CACHE_SIZE: 2G
  RUSTC_WRAPPER: sccache
  # SCCACHE_DIR: ${{ github.workspace }}/.sccache
  SCCACHE_BUCKET: subzero-sccache
  RUST_TOOLCHAIN: stable
  NODE_VERSION: 18

  POSTGRES_USER: postgrest_test_authenticator
  POSTGRES_PASSWORD: pass
  POSTGRES_DB: app

  MYSQL_USER: mysql_test_authenticator
  MYSQL_PASSWORD: pass
  MYSQL_DATABASE: public
  MYSQL_ROOT_PASSWORD: pass

  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1

jobs:
  build-test:
    name: build-test
    runs-on: ubuntu-latest
    steps:
      - name: "Set environmental variables"
        run: |
          echo "POSTGRESQL_DB_URI=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/$POSTGRES_DB" >> $GITHUB_ENV
          echo "MYSQL_DB_URI=mysql://$MYSQL_USER:$MYSQL_PASSWORD@localhost:3306/$MYSQL_DATABASE" >> $GITHUB_ENV

      - uses: actions/checkout@v2
        if: ${{ !env.ACT }}

      - uses: ./.github/actions/rustup
        with:
          version: ${{ env.RUST_TOOLCHAIN }}
      - uses: ./.github/actions/cargo-cache
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Set up prerequisites and environment (mostly because of pgx)
        run: |
          echo ""
          echo "MAKEFLAGS=$MAKEFLAGS -j $(grep -c ^processor /proc/cpuinfo)" >> $GITHUB_ENV
          cat $GITHUB_ENV
          echo ""
          echo "----- Remove old postgres -----"
          sudo apt remove -y '^postgres.*' '^libpq.*'
          echo ""
          echo "----- Set up PostgreSQL Apt repository -----"
          sudo apt-get install -y wget gnupg
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update -y -qq --fix-missing
          echo ""
          echo "----- Install system dependencies and PostgreSQL version $PG_VER -----"
          sudo apt-get install -y \
            llvm \
            clang \
            gcc \
            make \
            build-essential \
            libz-dev \
            zlib1g-dev \
            strace \
            libssl-dev \
            pkg-config \
            postgresql-$PG_VER \
            postgresql-server-dev-$PG_VER
          echo ""
          echo "----- Set up Postgres permissions -----"
          sudo chmod a+rwx `/usr/lib/postgresql/$PG_VER/bin/pg_config --pkglibdir` `/usr/lib/postgresql/$PG_VER/bin/pg_config --sharedir`/extension /var/run/postgresql/
          echo ""
          echo "----- Print env -----"
          env
          echo ""
          echo "----- Get cargo version -----"
          cargo --version
          echo ""

      - name: Install cargo-pgx
        run: cargo install --locked --force cargo-pgx

      - name: Run 'cargo pgx init' against system-level postgres-$PG_VER
        run: cargo pgx init --pg$PG_VER /usr/lib/postgresql/$PG_VER/bin/pg_config

      - run: cargo fmt --all -- --check

      - name: Install Dependencies
        run: |
          sudo apt-key adv --refresh-keys --keyserver keyserver.ubuntu.com
          sudo apt-get update
          sudo apt-get install --yes sqlite3

      - run: cargo build --workspace --exclude subzero-wasm --exclude subzero-pgx

      - name: Build subzero-wasm 
        working-directory: subzero-wasm
        # run: wasm-pack build --release --target web
        run: |
          if ! command -v wasm-pack &> /dev/null
          then
              echo "wasm-pack could not be found, installing from git"
              cargo install --git https://github.com/rustwasm/wasm-pack
          else
              echo "wasm-pack found"
          fi

          
          wasm-pack build --release --target web --out-dir=pkg-web
          wasm-pack build --release --target nodejs --out-dir=pkg-node
          wasm-pack build --release --target deno --out-dir=pkg-deno
        # run: |
        #   cargo install -f wasm-bindgen-cli
        #   cargo build --package subzero-wasm --target=wasm32-unknown-unknown --release
        #   wasm-bindgen --out-dir=pkg-web --target=web --omit-default-module-path ../target/wasm32-unknown-unknown/release/subzero_wasm.wasm
        #   wasm-bindgen --out-dir=pkg-node --target=nodejs --omit-default-module-path ../target/wasm32-unknown-unknown/release/subzero_wasm.wasm
        #   wasm-bindgen --out-dir=pkg-deno --target=deno --omit-default-module-path ../target/wasm32-unknown-unknown/release/subzero_wasm.wasm


      - run: npm ci
        working-directory: subzero-node
      - run: npm run lint
        working-directory: subzero-node

      - name: Bring up db services
        run: docker-compose --file .github/docker-compose.yml --env-file .github/.env up -d

      - run: cargo test
        working-directory: subzero-core
      - run: cargo test sqlite
        working-directory: subzero-rocket
      - run: cargo test postgresql -- --test-threads=1
        working-directory: subzero-rocket
      - run: cargo test mysql -- --test-threads=1
        working-directory: subzero-rocket

      - run: npm test
        working-directory: subzero-node

      - run: sccache --show-stats

      - name: Bring down db services
        run: docker-compose --file .github/docker-compose.yml --env-file .github/.env down
